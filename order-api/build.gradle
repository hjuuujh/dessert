buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}
plugins {
    id 'java'
    id "io.spring.dependency-management"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id 'com.epages.restdocs-api-spec' version '0.16.0'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.zerobase'
version = '0.0.1-SNAPSHOT'

//configurations {
//    asciidoctorExt
//}
configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}
ext {
    springCloudSleuthOtelVersion = "1.0.0-M1"
    releaseTrainVersion = "2021.0.1"

    snippetsDir = file('build/generated-snippets')
}


repositories {
    mavenCentral()
    maven {
        url "https://repo.spring.io/snapshot"
    }
    maven {
        url "https://repo.spring.io/milestone"
    }
    maven {
        url "https://repo.spring.io/release"
    }
}
// MSA 용
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${releaseTrainVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-sleuth-otel-dependencies:${springCloudSleuthOtelVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'io.github.openfeign:feign-httpclient'

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-config-client'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    testImplementation 'org.springframework.batch:spring-batch-test'

    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:5.0.0" // querydsl 라이브러리
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0" //  Querydsl 관련 코드 생성 기능 제공
    // restdocs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.2'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    baseDirFollowsSourceFile()
    configurations 'asciidoctorExt'
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs/asciidoc')
}
task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs/asciidoc")
}

build {
    dependsOn copyDocument
}

// 이걸 실행하면 build/api-spec 이생김
// 이렇게 생긴 파일을 swagger에서 읽으면 됨
openapi3 {
    server = 'http://localhost:8080'
    title = 'My API'
    description = 'My API description'
    version = '0.1.0'
    format = 'yaml'
    delete file("src/main/resources/static/docs/openapi")
    copy{
        from file("build/api-spec")
        into file("src/main/resources/static/docs/openapi")
    }
}



//querydsl 추가 시작 (위에 plugin 추가 부분과 맞물림)
def querydslDir = "generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets { // IDE의 소스 폴더에 자동으로 넣어준다.
    main.java.srcDir querydslDir
}



compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl // Q파일을 생성해준다.
}